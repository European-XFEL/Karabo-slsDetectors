SUBDIRS = slsDetectorsSimulation slsControl slsReceiver

.PHONY: build package test $(SUBDIRS)

CONF ?= Debug
DISTDIR = dist/$(CONF)/GNU-Linux-x86

ifndef KARABO
	KARABO := $(shell cat ${HOME}/.karabo/karaboFramework)
endif

build: slsDetectorsSimulation version.hh
	$(MAKE) -C slsControl build
	$(MAKE) -C slsReceiver build
	mkdir -p $(DISTDIR)
	cp -a slsControl/$(DISTDIR)/*.so $(DISTDIR)
	cp -a slsReceiver/$(DISTDIR)/*.so $(DISTDIR)

package: build
	@$(KARABO)/bin/.bundle-cppplugin.sh dist $(CONF) GNU-Linux-x86

test: slsDetectorsSimulation version.hh
	$(MAKE) -C slsControl test
	$(MAKE) -C slsReceiver test

clean:
	$(MAKE) -C slsControl clean
	$(MAKE) -C slsReceiver clean
	$(MAKE) -C slsDetectorsSimulation clean
	rm -f $(DISTDIR)/*.so

slsDetectorsSimulation:
ifeq ($(CONF),Simulation)
	$(MAKE) -C $@ CONF=Release
endif

slsControl: slsDetectorsSimulation version.hh
	$(MAKE) -C $@

slsReceiver: slsDetectorsSimulation version.hh
	$(MAKE) -C $@

PACKAGE_NAME=$(shell basename -s .git `git remote -v | grep fetch | head -n1 | awk '{ print $$2 }' `)

version.hh: .git/HEAD .git/index .git/refs/tags
	@echo "// WARNING: This file is auto generated by the Makefile." > $@
	@echo "#ifndef PACKAGE_VERSION" >> $@
	# Note that --dirty can be fooled: Build once when clean and then change source files - or vice a versa...
	@echo "#define PACKAGE_VERSION \"$(PACKAGE_NAME)-$(shell git describe --tags --match "*.*.*" --dirty --always )\"" >> $@
	@echo "#endif" >> $@
	cp -a version.hh slsControl/src/.
	cp -a version.hh slsReceiver/src/.
